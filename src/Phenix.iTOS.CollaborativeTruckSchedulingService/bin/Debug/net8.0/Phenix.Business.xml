<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Phenix.Business</name>
    </assembly>
    <members>
        <member name="T:Phenix.Business.BusinessBase`1">
            <summary>
            业务基类
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Nullable{System.Boolean}})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="P:Phenix.Business.BusinessBase`1.IsDirty">
            <summary>
            更新状态(含从业务对象)
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetDetail``1(``0[])">
            <summary>
            设置从业务对象
            </summary>
            <param name="detail">从业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SetDetail``1(System.Boolean,``0[])">
            <summary>
            设置从业务对象
            </summary>
            <param name="ignoreRepeat">忽略重复的</param>
            <param name="detail">从业务对象</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.HaveDetail``1">
            <summary>
            存在从业务对象
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FindDetail``1">
            <summary>
            检索从业务对象
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.NewDetail``1(Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            新增从业务对象(自动填充主键和保留字段)
            </summary>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.NewDetail``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增从业务对象(自动填充主键和保留字段)
            </summary>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>业务对象</returns>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.FetchDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从业务对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.BeginEdit">
            <summary>
            启动编辑(仅允许编辑非IsSelfDirty状态的对象(含从业务对象))
            快照当前数据
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.CancelEdit">
            <summary>
            撤销编辑(仅允许撤销IsSelfDirty状态的对象(含从业务对象))
            恢复快照数据
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.ApplyEdit">
            <summary>
            应用编辑(含从业务对象)
            丢弃快照数据
            </summary>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SaveDepth(System.Boolean)">
            <summary>
            级联保存
            </summary>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SaveDepth(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            级联保存
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
        </member>
        <member name="M:Phenix.Business.BusinessBase`1.SaveDepth(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            级联保存
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
        </member>
        <member name="T:Phenix.Business.EntityBase`1">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.#ctor(System.String)">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.New(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            新增实体对象(自动填充主键和保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.New(Phenix.Core.Data.Database,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增实体对象(自动填充主键和保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.New(Phenix.Core.Data.Database,System.Int64,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            新增实体对象(自动填充保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="primaryKeyLong">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.New(Phenix.Core.Data.Database,System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增实体对象(自动填充保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="primaryKeyLong">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchRoot(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取根实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchKeyValues``1(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchKeyValues``1(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,``0}},Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchKeyValues``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            获取全部实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchKeyValues``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,``0}},Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取全部实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchKeyValues``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            获取全部实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchKeyValues``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,``0}},Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取全部实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchList(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="F:Phenix.Business.EntityBase`1._dataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.SelfSheet">
            <summary>
            操作单子
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.PrimaryKeyProperty">
            <summary>
            主键表字段映射类属性
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.TargetTable">
            <summary>
            持久化表
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.Master">
            <summary>
            主实体
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.Root">
            <summary>
            根实体
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.IsRoot">
            <summary>
            是根实体
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.PrimaryKey">
            <summary>
            主键值
            </summary>
        </member>
        <member name="P:Phenix.Business.EntityBase`1.PrimaryKeyLong">
            <summary>
            主键值
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FillReservedFields(Phenix.Core.Data.ExecuteAction)">
            <summary>
            填充保留字段
            </summary>
            <param name="executeAction">执行动作</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InitializeSelf">
            <summary>
            初始化自己
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.NewDetail``1(Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            新增从实体对象(自动填充主键和保留字段)
            </summary>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.NewDetail``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增从实体对象(自动填充主键和保留字段)
            </summary>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.FetchDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteDetails``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            删除从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteDetails``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteDetails``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            删除从实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteDetails``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除从实体对象
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteDetails``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            删除从实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteDetails``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除从实体对象
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertOrUpdateSelf">
            <summary>
            新增自己如遇唯一键冲突则更新记录
            </summary>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertOrUpdateSelf(System.Data.Common.DbConnection)">
            <summary>
            新增自己如遇唯一键冲突则更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertOrUpdateSelf(System.Data.Common.DbTransaction)">
            <summary>
            新增自己如遇唯一键冲突则更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertSelf">
            <summary>
            新增自己
            </summary>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertSelf(System.Data.Common.DbConnection)">
            <summary>
            新增自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertSelf(System.Data.Common.DbTransaction)">
            <summary>
            新增自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertSelf(System.Int64)">
            <summary>
            新增自己
            </summary>
            <param name="primaryKeyLong">主键值</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertSelf(System.Data.Common.DbConnection,System.Int64)">
            <summary>
            新增自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="primaryKeyLong">主键值</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.InsertSelf(System.Data.Common.DbTransaction,System.Int64)">
            <summary>
            新增自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="primaryKeyLong">主键值</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            设置属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="valueLambda">值 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.Apply(Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            应用属性值
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.Apply(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            应用属性值
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.GetValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            提取属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.GetValue(System.String,System.Boolean)">
            <summary>
            提取属性值
            </summary>
            <param name="propertyName">属性名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.GetDirtValues(`0)">
            <summary>
            提取脏属性值
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.AppendCriteriaForUpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            为更新自己追加条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(`0,System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="source">数据源</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,`0,System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="source">数据源</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,`0,System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="source">数据源</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.AppendCriteriaForDeleteSelf(Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            为删除自己追加条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.Ascending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            升序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Business.EntityBase`1.Descending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            降序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="T:Phenix.Business.IBusiness">
            <summary>
            业务对象接口
            </summary>
        </member>
        <member name="P:Phenix.Business.IBusiness.IsDirty">
            <summary>
            更新状态(含从业务对象)
            </summary>
        </member>
        <member name="T:Phenix.Business.ISupportUndo">
            <summary>
            支持编辑回滚
            </summary>
        </member>
        <member name="P:Phenix.Business.ISupportUndo.IsFetched">
            <summary>
            离线状态
            </summary>
        </member>
        <member name="P:Phenix.Business.ISupportUndo.IsSelfDirty">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="P:Phenix.Business.ISupportUndo.IsNew">
            <summary>
            新增状态
            </summary>
        </member>
        <member name="P:Phenix.Business.ISupportUndo.IsSelfDeleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="P:Phenix.Business.ISupportUndo.OldPropertyValues">
            <summary>
            旧属性值
            </summary>
        </member>
        <member name="P:Phenix.Business.ISupportUndo.DirtyPropertyNames">
            <summary>
            脏属性值
            </summary>
        </member>
        <member name="M:Phenix.Business.ISupportUndo.BeginEdit">
            <summary>
            启动编辑(仅允许编辑非IsSelfDirty状态的对象)
            快照当前数据
            </summary>
        </member>
        <member name="M:Phenix.Business.ISupportUndo.CancelEdit">
            <summary>
            撤销编辑(仅允许撤销IsSelfDirty状态的对象)
            恢复快照数据
            </summary>
        </member>
        <member name="M:Phenix.Business.ISupportUndo.ApplyEdit">
            <summary>
            应用编辑
            丢弃快照数据
            </summary>
        </member>
        <member name="T:Phenix.Business.TreeEntityBase`1">
            <summary>
            树实体基类
            </summary>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.#ctor(System.String,System.Int64,System.Int64,System.Int64,`0[])">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.NewRoot(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            新增根实体对象(自动填充主键和保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.NewRoot(Phenix.Core.Data.Database,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增根实体对象(自动填充主键和保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.NewRoot(Phenix.Core.Data.Database,System.Int64,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            新增根实体对象(自动填充保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="id">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.NewRoot(Phenix.Core.Data.Database,System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增根实体对象(自动填充保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="id">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FetchTree(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{`0}[])">
            <summary>
            获取整颗树
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>根实体对象</returns>
        </member>
        <member name="F:Phenix.Business.TreeEntityBase`1._id">
            <summary>
            主键属性(映射表ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Business.TreeEntityBase`1.Id">
            <summary>
            主键属性(映射表ID字段)
            </summary>
        </member>
        <member name="F:Phenix.Business.TreeEntityBase`1._rootId">
            <summary>
            根节点ID(映射表Root_ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Business.TreeEntityBase`1.RootId">
            <summary>
            根节点ID(映射表Root_ID字段)
            </summary>
        </member>
        <member name="F:Phenix.Business.TreeEntityBase`1._parentId">
            <summary>
            父节点ID(映射表Parent_ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Business.TreeEntityBase`1.ParentId">
            <summary>
            父节点ID(映射表Parent_ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Business.TreeEntityBase`1.Master">
            <summary>
            主实体
            </summary>
        </member>
        <member name="P:Phenix.Business.TreeEntityBase`1.Parent">
            <summary>
            父实体
            </summary>
        </member>
        <member name="F:Phenix.Business.TreeEntityBase`1._children">
            <summary>
            儿孙
            </summary>
        </member>
        <member name="P:Phenix.Business.TreeEntityBase`1.Children">
            <summary>
            儿孙
            </summary>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.FindInBranch(System.Func{`0,System.Boolean})">
            <summary>
            在本枝杈中寻找
            </summary>
            <param name="criteria">匹配条件(节点,是否匹配)</param>
            <returns>节点</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.AddChild(System.Func{`0})">
            <summary>
            添加子对象
            </summary>
            <param name="doCreate">调用本函数新增(子节点)</param>
            <returns>子节点</returns>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.ChangeParent(`0)">
            <summary>
            更改父节点
            </summary>
            <param name="newParent">父节点</param>
        </member>
        <member name="M:Phenix.Business.TreeEntityBase`1.DeleteBranch">
            <summary>
            删除本枝杈
            </summary>
            <returns>更新记录数</returns>
        </member>
        <member name="T:Phenix.Business.UndoableBase`1">
            <summary>
            可撤销编辑的实体基类
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Nullable{System.Boolean}})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.New(`0)">
            <summary>
            新增实体对象(自动填充主键和保留字段)
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="P:Phenix.Business.UndoableBase`1.IsFetched">
            <summary>
            离线状态
            </summary>
        </member>
        <member name="P:Phenix.Business.UndoableBase`1.IsNew">
            <summary>
            新增状态
            </summary>
        </member>
        <member name="P:Phenix.Business.UndoableBase`1.IsSelfDeleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="P:Phenix.Business.UndoableBase`1.IsSelfDirty">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="P:Phenix.Business.UndoableBase`1.OldPropertyValues">
            <summary>
            旧属性值
            </summary>
        </member>
        <member name="P:Phenix.Business.UndoableBase`1.DirtyPropertyNames">
            <summary>
            脏属性名
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.InitializeSelf">
            <summary>
            初始化自己
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.MarkFetched">
            <summary>
            MarkFetched
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.BeginEdit">
            <summary>
            启动编辑(仅允许编辑非IsSelfDirty状态的对象)
            快照当前数据
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.CancelEdit">
            <summary>
            撤销编辑(仅允许撤销IsSelfDirty状态的对象)
            恢复快照数据
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.ApplyEdit">
            <summary>
            应用编辑
            丢弃快照数据
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.GetOldValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            获取旧值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.IsDirtyProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            是否脏属性(null代表仅基于新旧值的判断)
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.SetDirtyProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Nullable{System.Boolean})">
            <summary>
            设置脏属性
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="isDirty">是否脏数据(null代表仅基于新旧值的判断)</param>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.SetDirtyValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            设置脏属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="newValue">新属性值</param>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.SetDirtyValues(`0)">
            <summary>
            设置脏属性值
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.GetDirtValues">
            <summary>
            提取脏属性值
            </summary>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.SaveSelf(System.Boolean)">
            <summary>
            保存自己
            </summary>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.SaveSelf(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            保存自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
        </member>
        <member name="M:Phenix.Business.UndoableBase`1.SaveSelf(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            保存自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
        </member>
    </members>
</doc>
